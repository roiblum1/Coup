@startuml
class com.example.demo6.Main {
+ {static} void main(String[])
}

class com.example.demo6.Model.Actions.StealAction {
+ boolean canPlayerPerform()
+ boolean execute(boolean,boolean)
+ boolean challenge()
+ Player getTargetPlayer()
}

class com.example.demo6.Model.Deck {
- Stack<Card> contents
+ int getSize()
+ boolean isEmpty()
+ Stack<Card> getContents()
+ Card getCard()
+ void returnCard(Card)
+ Deck deepCopy()
}


enum com.example.demo6.Model.CardType {
+  DUKE
+  ASSASSIN
+  CAPTAIN
+  AMBASSADOR
+  CONTESSA
}

abstract class com.example.demo6.Model.Actions.Action {
# Player player
# Player opponent
# ActionCode codeOfAction
+ boolean canBeBlocked
+ boolean canBeChallenged
+ ActionCode getActionCode()
+ String getCodeOfAction()
+ {abstract}boolean canPlayerPerform()
+ {abstract}boolean execute(boolean,boolean)
+ {abstract}boolean challenge()
+ Player getPlayer()
+ void setPlayer(Player)
+ void setOpponent(Player)
}


enum com.example.demo6.Model.Actions.ActionCode {
+  INCOME
+  FOREIGN_AID
+  COUP
+  TAX
+  ASSASSINATE
+  STEAL
+  SWAP
+  BLOCK
}

class com.example.demo6.Model.Actions.ForeignAidAction {
+ boolean canPlayerPerform()
+ boolean execute(boolean,boolean)
+ boolean challenge()
}

class com.example.demo6.Model.Actions.SwapAction {
+ boolean canPlayerPerform()
+ boolean execute(boolean,boolean)
+ boolean challenge()
}

class com.example.demo6.AI.Heuristic {
~ {static} Action selectActionHeuristically(List<Action>,Game)
+ {static} boolean simulateChallenge(Game,Action)
+ {static} boolean simulateBlock(Game,Action)
+ {static} boolean simulateBlockChallenge(Game,Action)
+ {static} boolean isSuspiciousBlock(Deck.CardType,Player)
+ {static} List<Card> selectCardsToKeep(Game,Player,List<Card>)
+ {static} Card selectCardToGiveUp(Game,Player)
~ {static} int evaluatePosition(Player)
- {static} int getCardValue(Card)
}

class com.example.demo6.Model.Actions.AssassinateAction {
+ boolean canPlayerPerform()
+ boolean execute(boolean,boolean)
+ boolean challenge()
}

class com.example.demo6.Model.Actions.CoupAction {
+ boolean canPlayerPerform()
+ boolean execute(boolean,boolean)
+ boolean challenge()
}

class com.example.demo6.Controller.GameController {
- Game game
- GameView view
- Player currentPlayer
- Player aiPlayer
- MCTS mcts
+ void initializeGame()
+ void executeAction(Action)
- boolean handleBlockAction(Player,Action,boolean)
- boolean handleChallenge(Action)
- void endTurn()
- void executeAIPlayerTurn()
- boolean isGameOver()
+ void handleLoseCard(Player)
- void endGame()
+ Player getCurrentPlayer()
- void updateView()
}


class com.example.demo6.Model.Actions.IncomeAction {
+ boolean canPlayerPerform()
+ boolean execute(boolean,boolean)
+ boolean challenge()
}

class com.example.demo6.AI.NodeGamePair {
+ Node node
+ Game game
}

class com.example.demo6.Model.Card {
- Deck.CardType type
+ Deck.CardType getType()
+ String toString()
+ boolean equals(Object)
+ int hashCode()
}


class com.example.demo6.Model.Game {
- List<Player> playerList
- Deck deck
- int currentPlayerIndex
- Action lastExecutedAction
+ void addPlayer(Player)
+ int getCurrentPlayerIndex()
+ void setCurrentPlayerIndex(int)
+ List<Action> getAvailableActions(Player)
+ Player getOpponent(Player)
+ List<Player> getActivePlayers()
+ Player getCurrentPlayer()
+ List<Player> getPlayers()
+ Deck getDeck()
+ void setDeck(Deck)
+ boolean isGameOver()
+ Player switchTurns()
+ List<Card> drawCards(int)
+ void setPlayerList(List<Player>)
+ void setLastExecutedAction(Action)
+ Action getLastExecutedAction()
+ Game deepCopy()
+ void executeAction(Action,List<Card>)
}


class com.example.demo6.AI.Node {
- {static} double EXPLORATION
- Action action
- Node parent
- int visitCount
- int reward
- Map<Action,Node> children
+ void addChildren(List<Node>)
+ double getUCTValue()
+ Action getAction()
+ Node getParent()
+ int getVisitCount()
+ void incrementVisitCount()
+ void incrementReward(int)
+ Map<Action,Node> getChildren()
+ void addChild(Node)
+ Node selectChild()
+ boolean isLeaf()
+ double getReward()
+ String getRewardToString()
}


class com.example.demo6.View.GameView {
- VBox gameContent
- Map<String,HBox> playerCardsMap
- Label cardStackCountLabel
- int cardStackCount
- VBox cardStackArea
- Player currentPlayer
- GameController controller
+ {static} void main(String[])
+ void start(Stage)
+ void setController(GameController)
+ boolean promptForChallenge(String)
+ boolean promptForBlock(String)
+ List<Card> promptForCardSelection(List<Card>,int)
+ Card promptPlayerForCardToGiveUp(Player)
+ void updatePlayerInfo(List<Player>)
+ void updateCurrentPlayer(Player)
+ void updateAvailableActions(List<Action>)
- void updateTurnTable()
- void createTurnTable()
- void createPlayerArea(Player,List<String>)
+ void createCardStackArea(Deck)
+ void updateDeckInfo(Deck)
- void animateCardReveal(Player,ImageView)
- void animateCoinUpdate(Label,int,int)
+ void displayWinner(Player)
+ void displayMessage(String)
- String getCardImage(Card)
}


class com.example.demo6.Model.Actions.TaxAction {
+ boolean canPlayerPerform()
+ boolean execute(boolean,boolean)
+ boolean challenge()
}

class com.example.demo6.Model.Actions.BlockAction {
- Action actionToBlock
- boolean isBlocked
+ boolean canPlayerPerform()
+ boolean execute(boolean,boolean)
+ boolean isBlocked()
+ boolean challenge()
}


class com.example.demo6.Model.Player {
- int NUMBER_OF_CARDS
+ int NUMBER_OF_COINS
- String name
- int coins
- List<Card> cards
- Deck currentDeck
+ String getName()
+ int getCoins()
+ List<Card> getCards()
+ void setDeck(Deck)
+ void setCoins(int)
+ void setCards(List<Card>)
+ void updateCoins(int)
+ void pickCards()
+ void returnCard(Card)
+ void swapCards(List<Card>,List<Card>)
+ void loseRandomInfluence()
+ List<Card> selectRandomCardsToKeep(List<Card>)
+ boolean hasCard(Deck.CardType)
+ List<Card> deepCopyCards()
}




com.example.demo6.Model.Actions.Action <|-- com.example.demo6.Model.Actions.StealAction
java.io.Serializable <|.. com.example.demo6.Model.Deck
com.example.demo6.Model.Actions.Action <|-- com.example.demo6.Model.Actions.ForeignAidAction
com.example.demo6.Model.Actions.Action <|-- com.example.demo6.Model.Actions.SwapAction
com.example.demo6.Model.Actions.Action <|-- com.example.demo6.Model.Actions.AssassinateAction
com.example.demo6.Model.Actions.Action <|-- com.example.demo6.Model.Actions.CoupAction
com.example.demo6.Model.Actions.Action <|-- com.example.demo6.Model.Actions.IncomeAction
java.io.Serializable <|.. com.example.demo6.Model.Card
java.io.Serializable <|.. com.example.demo6.Model.Game
javafx.application.Application <|-- com.example.demo6.View.GameView
com.example.demo6.Model.Actions.Action <|-- com.example.demo6.Model.Actions.TaxAction
com.example.demo6.Model.Actions.Action <|-- com.example.demo6.Model.Actions.BlockAction
java.io.Serializable <|.. com.example.demo6.Model.Player
@enduml
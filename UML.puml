@startuml
class com.example.demo6.AI.MCTS {
    - private Game rootGame
    - private Node root
    - private int numOfSimulations
    - private int maxDepth
    - private Player aiPlayer
    - private Player humanPlayer
    + MCTS(Game, int, int)
    + Action bestMove()
    + void search(int, int)
    + NodeGamePair selectNode(int)
    + void expand(Node, Game)
    + Player rollOut(Game, int)
    + Action selectActionForPlayer(Game, Player, List<Action>)
    + void backPropagate(Node, Player, Player, Game)
    + void handleAction(Action)
    + void handleGameOver(Player)
    + void executeAction(Game, Action, boolean, boolean)
    + boolean simulateChallenge(Game, Action)
    + boolean simulateBlock(Game, Action)
    + boolean simulateBlockChallenge(Game, Action)
    + boolean isSuspiciousBlock(Deck.CardType, Player)
    + List<Card> selectCardsToKeep(Game, Player, List<Card>)
    + Card selectCardToGiveUp(Game, Player)
    + int evaluatePosition(Player)
    + int getCardValue(Card)
}

class com.example.demo6.AI.Node {
    - static final double EXPLORATION
    - final Action action
    - final Node parent
    - int visitCount
    - int reward
    - final Map<Action, Node> children
    + Node(Action)
    + Node(Action, Node)
    + void addChildren(List<Node>)
    + double getUCTValue()
    + Action getAction()
    + Node getParent()
    + int getVisitCount()
    + void incrementVisitCount()
    + void incrementReward(int)
    + Map<Action, Node> getChildren()
    + void addChild(Node)
    + Node selectChild()
    + boolean isLeaf()
    + double getReward()
    + String getRewardToString()
}

class com.example.demo6.AI.NodeGamePair {
    + final Node node
    + final Game game
    + NodeGamePair(Node, Game)
}
enum com.example.demo6.Model.Actions.ActionName {
+  INCOME
+  FOREIGN_AID
+  COUP
+  TAX
+  ASSASSINATE
+  STEAL
+  SWAP
+  BLOCK
}

class com.example.demo6.Controller.GameController {
    - Game game
    - GameView view
    - Player currentPlayer
    - Player aiPlayer
    - MCTS mcts
    + GameController(GameView, Game)
    + void initializeGame()
    + void executeAction(Action)
    - boolean handleBlockAction(Player, Action, boolean)
    - boolean handleChallenge(Action)
    - void endTurn()
    - void executeAIPlayerTurn()
    - boolean isGameOver()
    + void handleLoseCard(Player)
    - void endGame()
    + Player getCurrentPlayer()
    - void updateView()
}


class com.example.demo6.Model.Actions.StealAction {
- Player targetPlayer
+ <<Create>> StealAction(Player,Player)
+ boolean canPlayerPerform()
+ boolean execute(boolean,boolean)
+ boolean challenge()
+ Player getTargetPlayer()
}


class com.example.demo6.Model.Game {
    - List<Player> playerList
    - Deck deck
    - int currentPlayerIndex
    - Action lastExecutedAction
    + Game(Deck)
    + void addPlayer(Player)
    + int getCurrentPlayerIndex()
    + void setCurrentPlayerIndex(int)
    + List<Action> getAvailableActions(Player)
    + Player getOpponent(Player)
    + List<Player> getActivePlayers()
    + Player getCurrentPlayer()
    + List<Player> getPlayers()
    + Deck getDeck()
    + void setDeck(Deck)
    + boolean isGameOver()
    + Player switchTurns()
    + List<Card> drawCards(int)
    + void setPlayerList(List<Player>)
    + void setLastExecutedAction(Action)
    + Action getLastExecutedAction()
    + Game deepCopy()
    + void executeAction(Action, List<Card>)
}


class com.example.demo6.Model.Deck {
- Stack<Card> contents
+ <<Create>> Deck(Set<CardType>,int)
+ int getSize()
+ boolean isEmpty()
+ Card getCard()
+ void returnCard(Card)
}


enum com.example.demo6.Model.CardType {
+  DUKE
+  ASSASSIN
+  CAPTAIN
+  AMBASSADOR
+  CONTESSA
- String name
~ <<Create>> CardType(String)
+ String getName()
}


class com.example.demo6.Model.Deck$CardFactory {
~ {static} Card createCard(String)
}

class com.example.demo6.Model.Card {
- String name
+ <<Create>> Card(String)
+ String getName()
+ String toString()
+ boolean equals(Object)
+ int hashCode()
}


class com.example.demo6.Model.Actions.ForeignAidAction {
+ <<Create>> ForeignAidAction(Player)
+ boolean canPlayerPerform()
+ boolean execute(boolean,boolean)
+ boolean challenge()
}

class com.example.demo6.Model.Actions.TaxAction {
+ <<Create>> TaxAction(Player,Player)
+ boolean canPlayerPerform()
+ boolean execute(boolean,boolean)
+ boolean challenge()
}

class com.example.demo6.View.GameView {
- VBox gameContent
- Map<String,HBox> playerCardsMap
- Label cardStackCountLabel
- int cardStackCount
- VBox cardStackArea
- Player currentPlayer
- GameController controller
+ {static} void main(String[])
+ void start(Stage)
+ void setController(GameController)
+ boolean promptForChallenge(String)
+ boolean promptForBlock(String)
+ List<Card> promptForCardSelection(List<Card>,int)
+ Card promptPlayerForCardToGiveUp(Player)
+ void updatePlayerInfo(List<Player>)
+ void updateCurrentPlayer(Player)
+ void updateAvailableActions(List<Action>)
- void updateTurnTable()
- void createTurnTable()
- void createPlayerArea(Player,List<String>)
+ void createCardStackArea(Deck)
+ void updateDeckInfo(Deck)
+ void displayWinner(Player)
+ void displayMessage(String)
- String getCardImage(Card)
}


class com.example.demo6.Model.Actions.BlockAction {
- Action actionToBlock
- boolean isBlocked
+ <<Create>> BlockAction(Player,Player,Action)
+ boolean canPlayerPerform()
+ boolean execute(boolean,boolean)
+ boolean isBlocked()
+ boolean challenge()
}


class com.example.demo6.Model.Actions.SwapAction {
+ <<Create>> SwapAction(Player,Player)
+ boolean canPlayerPerform()
+ boolean execute(boolean,boolean)
+ boolean challenge()
}

class com.example.demo6.Model.Actions.CoupAction {
- Player targetPlayer
+ <<Create>> CoupAction(Player,Player)
+ boolean canPlayerPerform()
+ boolean execute(boolean,boolean)
+ boolean challenge()
}


class com.example.demo6.Model.Actions.AssassinateAction {
- Player targetPlayer
+ <<Create>> AssassinateAction(Player,Player)
+ boolean canPlayerPerform()
+ boolean execute(boolean,boolean)
+ boolean challenge()
+ Player getTargetPlayer()
}


class com.example.demo6.Model.Player {
- int NUMBER_OF_CARDS
- String name
- int coins
- List<Card> cards
- Deck currentDeck
+ <<Create>> Player(String)
+ String getName()
+ void setDeck(Deck)
+ int getCoins()
+ void updateCoins(int)
+ List<Card> getCards()
+ void pickCards()
+ void returnCard(Card)
+ void swapCards(List<Card>,List<Card>)
+ boolean hasCard(Card)
}


class com.example.demo6.Model.Actions.IncomeAction {
+ <<Create>> IncomeAction(Player,Player)
+ boolean canPlayerPerform()
+ boolean execute(boolean,boolean)
+ boolean challenge()
}

abstract class com.example.demo6.Model.Actions.Action {
    # Player player
    # Player opponent
    # ActionCode codeOfAction
    # boolean canBeBlocked
    # boolean canBeChallenged
    + Action(Player, Player, ActionCode)
    + ActionCode getActionCode()
    + String getCodeOfAction()
    + abstract boolean canPlayerPerform()
    + abstract boolean execute(boolean, boolean)
    + abstract boolean challenge()
    + Player getPlayer()
    + void setPlayer(Player)
    + void setOpponent(Player)
}




com.example.demo6.Model.Actions.Action <|-- com.example.demo6.Model.Actions.StealAction
com.example.demo6.Model.Deck +.. com.example.demo6.Model.Deck$CardFactory
com.example.demo6.Model.Actions.Action <|-- com.example.demo6.Model.Actions.ForeignAidAction
com.example.demo6.Model.Actions.Action <|-- com.example.demo6.Model.Actions.TaxAction
javafx.application.Application <|-- com.example.demo6.View.GameView
com.example.demo6.Model.Actions.Action <|-- com.example.demo6.Model.Actions.BlockAction
com.example.demo6.Model.Actions.Action <|-- com.example.demo6.Model.Actions.SwapAction
com.example.demo6.Model.Actions.Action <|-- com.example.demo6.Model.Actions.CoupAction
com.example.demo6.Model.Actions.Action <|-- com.example.demo6.Model.Actions.AssassinateAction
com.example.demo6.Model.Actions.Action <|-- com.example.demo6.Model.Actions.IncomeAction
@enduml